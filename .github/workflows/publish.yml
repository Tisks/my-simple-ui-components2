name: Publish to NPM

on:
  pull_request:
    types:
      - closed

jobs:
  on_pull_request_merge:
    runs-on: ubuntu-latest
    steps:
      - name: Check if PR is merged
        id: pr-merged
        run: |
          if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
            echo "Pull request is merged."
            echo "::set-output name=pr_merged::true"
          else
            echo "Pull request is not merged."
            echo "::set-output name=pr_merged::false"
          fi
      - name: Setup node
        uses: actions/setup-node@v3
        with:
            node-version: 16
            cache: yarn  
        
      - name: Get Version from package.json
        id: get-version
        run: |
            TAG_VERSION=$(node get-version.js)
            echo "::set-output name=tag_version::$TAG_VERSION"

      - name: Extract Version Bump
        if: steps.pr-merged.outputs.pr_merged == 'true'
        id: extract-info
        run: |
          PR_BODY=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "${{ github.api_url }}/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}")

          echo "PR Body: $PR_BODY"  # Add this line to print the PR_BODY

          # Declare variables outside the conditional blocks
          VERSION_BUMP="Unknown"
          RELEASE_DECISION="Unknown"

          # Extract the version bump type (Patch, Minor, or Major)
          if [[ "$PR_BODY" == *"[x]"* && "$PR_BODY" == *"Patch"* ]]; then
            VERSION_BUMP="Patch"
          elif [[ "$PR_BODY" == *"[x]"* && "$PR_BODY" == *"Minor"* ]]; then
            VERSION_BUMP="Minor"
          elif [[ "$PR_BODY" == *"[x]"* && "$PR_BODY" == *"Major"* ]]; then
            VERSION_BUMP="Major"
          else
            VERSION_BUMP="Unknown"  # Default if none selected
          fi

          echo "::set-output name=version_bump::$VERSION_BUMP"

      - name: Use Extracted Information
        run: |
          echo "Version Bump: ${{ steps.extract-info.outputs.version_bump }}"

          CURRENT_VERSION="${{ steps.extract-info.outputs.version_bump }}"

          NEW_VERSION="Unknown"

          # Extract the major, minor, and patch components of the current version
          MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
          
          # Determine the ultimate TAG_VERSION based on VERSION_BUMP
          if [[ "${{ steps.extract-info.outputs.version_bump }}" == "Patch" ]]; then
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          elif [[ "${{ steps.extract-info.outputs.version_bump }}" == "Minor" ]]; then
            NEW_MINOR=$((MINOR + 1))
            NEW_VERSION="$MAJOR.$NEW_MINOR.0"
          elif [[ "${{ steps.extract-info.outputs.version_bump }}" == "Major" ]]; then
            NEW_MAJOR=$((MAJOR + 1))
            NEW_VERSION="$NEW_MAJOR.0.0"
          else
            NEW_VERSION="Unknown"  # Default if none selected
          fi
          echo "NEW_VERSION: $NEW_VERSION"  # Add this line to print the NEW_VERSION
          echo "::set-output name=new_tag_version::$NEW_VERSION"
