name: Create release and publish to npm

on:
  pull_request:
    types:
      - closed

jobs:
  set_up_new_version:
    name: Set up new version
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Get Version from package.json
        id: get-version
        run: |
          TAG_VERSION=$(node -e "const fs = require('fs'); const packageJson = JSON.parse(fs.readFileSync('package.json')); console.log(packageJson.version);")
          echo "TAG_VERSION Body: $TAG_VERSION"
          echo "::set-output name=tag_version::$TAG_VERSION"

      - name: Extract Version Bump
        id: extract-info
        run: |
          GITHUB_BOT_COMMENT=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments")

          VERSION_CHECKBOXES=$(echo "$GITHUB_BOT_COMMENT" | jq '.[] | select(.user.login == "github-actions[bot]") | .body')

          echo "VERSION_CHECKBOXES: $VERSION_CHECKBOXES"

          if [ -z "$VERSION_CHECKBOXES" ]; then
            echo "No valid comments found. Exiting workflow."
            exit 1
          fi

          # Declare variables outside the conditional blocks
          VERSION_BUMP="Unknown"

          # Convert the version checkboxes to lowercase and then check for "[x]" or "[X]"
          VERSION_CHECKBOXES_LOWER=$(echo "$VERSION_CHECKBOXES" | tr '[:upper:]' '[:lower:]')

          if [[ "$VERSION_CHECKBOXES_LOWER" == *"[x]"* && "$VERSION_CHECKBOXES_LOWER" == *"patch"* ]]; then
            VERSION_BUMP="Patch"
          elif [[ "$VERSION_CHECKBOXES_LOWER" == *"[x]"* && "$VERSION_CHECKBOXES_LOWER" == *"minor"* ]]; then
            VERSION_BUMP="Minor"
          elif [[ "$VERSION_CHECKBOXES_LOWER" == *"[x]"* && "$VERSION_CHECKBOXES_LOWER" == *"major"* ]]; then
            VERSION_BUMP="Major"
          else
            VERSION_BUMP="Unknown"  # Default if none selected
          fi

          echo "::set-output name=version_bump::$VERSION_BUMP"

      - name: Determine new version
        id: new-version
        run: |
          echo "Version Bump: ${{ steps.extract-info.outputs.version_bump }}"
          echo "Actual version: ${{ steps.get-version.outputs.tag_version }}"

          CURRENT_VERSION="${{ steps.get-version.outputs.tag_version }}"

          NEW_VERSION="Unknown"

          # Split the current version into its components
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"

          # Determine the ultimate TAG_VERSION based on VERSION_BUMP
          if [[ "${{ steps.extract-info.outputs.version_bump }}" == "Patch" ]]; then
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          elif [[ "${{ steps.extract-info.outputs.version_bump }}" == "Minor" ]]; then
            NEW_MINOR=$((MINOR + 1))
            NEW_VERSION="$MAJOR.$NEW_MINOR.0"
          elif [[ "${{ steps.extract-info.outputs.version_bump }}" == "Major" ]]; then
            NEW_MAJOR=$((MAJOR + 1))
            NEW_VERSION="$NEW_MAJOR.0.0"
          else
            NEW_VERSION="Unknown"  # Default if none selected
          fi
          echo "NEW_VERSION: $NEW_VERSION"  # Add this line to print the NEW_VERSION
          echo "::set-output name=new_tag_version::$NEW_VERSION"

      - name: Update package version
        id: update-version
        run: |
          # Extract the existing version from the package.json
          CURRENT_VERSION="${{ steps.get-version.outputs.tag_version }}"

          # Replace this with your desired version string
          NEW_VERSION="${{ steps.new-version.outputs.new_tag_version }}"

          # Update the version in package.json
          node -e "const fs = require('fs'); const packageJson = JSON.parse(fs.readFileSync('package.json')); packageJson.version = '${NEW_VERSION}'; fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));"

  create_release:
    name: Create release
    needs: set_up_new_version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Setting up Git
        run: |
          git config --global user.email "leiser.mahu@gmail.com"
          git config --global user.name "Tisks"

      - name: Commit and push changes
        run: |
          NEW_VERSION="${{ needs.set_up_new_version.outputs.new_tag_version }}"
          echo "Update package version to $NEW_VERSION"
          git add package.json
          git commit -m "Update package version to $NEW_VERSION"
          git push

      - name: Create Tag
        run: |
          TAG_VERSION="${{ needs.set_up_new_version.outputs.new_tag_version }}"
          git tag -a "v$TAG_VERSION" -m "Version $TAG_VERSION"
          git push origin "v$TAG_VERSION"

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE=$(curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "${{ github.api_url }}/repos/${{ github.repository }}/releases" \
            -d '{"tag_name":"v${{ needs.set_up_new_version.outputs.new_tag_version }}", "name":"v${{ needs.set_up_new_version.outputs.new_tag_version }}",
                "draft":false,
                "prerelease":false,
                "generate_release_notes":true}')

          echo "RELEASE: $RELEASE"

  publish_to_npm:
    name: Publish to npm
    needs: set_up_new_version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install
        run: yarn install --frozen-lockfile

      - name: Build package
        run: yarn build

      - name: Publish to NPM
        uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.NPM_TOKEN }}
