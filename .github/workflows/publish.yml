name: Publish to NPM

on:
  pull_request:
    types:
      - closed

jobs:
  on_pull_request_merge:
    runs-on: ubuntu-latest
    steps:
      - name: Check if PR is merged
        id: pr-merged
        run: |
          if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
            echo "Pull request is merged."
            echo "::set-output name=pr_merged::true"
          else
            echo "Pull request is not merged."
            echo "::set-output name=pr_merged::false"
          fi

      - name: Setup node
        if: steps.pr-merged.outputs.pr_merged == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Get Version from package.json
        if: steps.pr-merged.outputs.pr_merged == 'true'
        id: get-version
        run: |
          TAG_VERSION=$(node get-version.js)
          echo "TAG_VERSION Body: $TAG_VERSION"
          echo "::set-output name=tag_version::$TAG_VERSION"

      - name: Extract Version Bump
        if: steps.pr-merged.outputs.pr_merged == 'true'
        id: extract-info
        run: |
          PR_BODY=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "${{ github.api_url }}/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}")

          # Use jq to extract the PR body
          PR_BODY_BODY=$(echo "$PR_BODY" | jq -r '.body')

          echo "PR Body: $PR_BODY_BODY"

          # Declare variables outside the conditional blocks
          VERSION_BUMP="Unknown"

          # Extract the version bump type (Patch, Minor, or Major)
          if [[ "$PR_BODY_BODY" == *"[X]"* && "$PR_BODY_BODY" == *"Patch"* ]]; then
            VERSION_BUMP="Patch"
          elif [[ "$PR_BODY_BODY" == *"[X]"* && "$PR_BODY_BODY" == *"Minor"* ]]; then
            VERSION_BUMP="Minor"
          elif [[ "$PR_BODY_BODY" == *"[X]"* && "$PR_BODY_BODY" == *"Major"* ]]; then
            VERSION_BUMP="Major"
          else
            VERSION_BUMP="Unknown"  # Default if none selected
          fi

          echo "::set-output name=version_bump::$VERSION_BUMP"

      - name: Determine new version
        id: new-version
        if: steps.pr-merged.outputs.pr_merged == 'true'
        run: |
          echo "Version Bump: ${{ steps.extract-info.outputs.version_bump }}"
          echo "Actual version: ${{ steps.get-version.outputs.tag_version }}"

          CURRENT_VERSION="${{ steps.get-version.outputs.tag_version }}"

          NEW_VERSION="Unknown"

          # Split the current version into its components
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"

          # Determine the ultimate TAG_VERSION based on VERSION_BUMP
          if [[ "${{ steps.extract-info.outputs.version_bump }}" == "Patch" ]]; then
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          elif [[ "${{ steps.extract-info.outputs.version_bump }}" == "Minor" ]]; then
            NEW_MINOR=$((MINOR + 1))
            NEW_VERSION="$MAJOR.$NEW_MINOR.0"
          elif [[ "${{ steps.extract-info.outputs.version_bump }}" == "Major" ]]; then
            NEW_MAJOR=$((MAJOR + 1))
            NEW_VERSION="$NEW_MAJOR.0.0"
          else
            NEW_VERSION="Unknown"  # Default if none selected
          fi
          echo "NEW_VERSION: $NEW_VERSION"  # Add this line to print the NEW_VERSION
          echo "::set-output name=new_tag_version::$NEW_VERSION"

      - name: Execute Changelog Script and Store in Variable
        id: changelog
        if: steps.pr-merged.outputs.pr_merged == 'true'
        run: |
          node generate-changelog.js "${{ steps.get-version.outputs.tag_version }}" "${{ steps.new-version.outputs.new_tag_version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Tag
        if: steps.pr-merged.outputs.pr_merged == 'true'
        run: |
           TAG_VERSION="${{ steps.new-version.outputs.new_tag_version }}"
           git tag -a "v$TAG_VERSION" -m "Version $TAG_VERSION"
           git push origin "v$TAG_VERSION"
           
      - name: Install
        run: yarn install --frozen-lockfile
   
      - name: Build package
        run: yarn build

      - name: Create Release
        if: steps.pr-merged.outputs.pr_merged == 'true'
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            TAG_VERSION="${{ steps.new-version.outputs.new_tag_version }}"
            gh release create "v$TAG_VERSION" ./dist/* \
            --title "v$TAG_VERSION" \
            --notes CHANGELOG.md
          
      - name: Publish to NPM
        if: steps.pr-merged.outputs.pr_merged == 'true'
        uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.NPM_TOKEN }}  # Make sure you have an NPM token set as a secret

      - name: Delete Changelog
        if: steps.pr-merged.outputs.pr_merged == 'true'
        run: |
          rm CHANGELOG.md
