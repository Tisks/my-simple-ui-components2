name: Publish to NPM

on:
  pull_request:
    types:
      - closed

jobs:
  on_pull_request_merge:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Get Version from package.json
        id: get-version
        run: |
          TAG_VERSION=$(node -e "const fs = require('fs'); const packageJson = JSON.parse(fs.readFileSync('package.json')); console.log(packageJson.version);")
          echo "TAG_VERSION Body: $TAG_VERSION"
          echo "::set-output name=tag_version::$TAG_VERSION"
          

      - name: Extract Version Bump
        id: extract-info
        run: |
          GITHUB_BOT_COMMENT=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments")

          # Parse the version bump from the comment
          VERSION_BUMP=$(echo "$GITHUB_BOT_COMMENT" | grep -oP '(?<=\[x\] )[A-Z][a-z]+')

          echo "VERSION_BUMP: $VERSION_BUMP"

          if [ -z "$VERSION_BUMP" ]; then
            echo "No valid version bump selected. Exiting workflow."
            exit 0
          fi

          echo "::set-output name=version_bump::$VERSION_BUMP"

      - name: Determine new version
        id: new-version
        run: |
          echo "Version Bump: ${{ steps.extract-info.outputs.version_bump }}"
          echo "Actual version: ${{ steps.get-version.outputs.tag_version }}"

          CURRENT_VERSION="${{ steps.get-version.outputs.tag_version }}"

          NEW_VERSION="Unknown"

          # Split the current version into its components
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"

          # Determine the ultimate TAG_VERSION based on VERSION_BUMP
          if [[ "${{ steps.extract-info.outputs.version_bump }}" == "Patch" ]]; then
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          elif [[ "${{ steps.extract-info.outputs.version_bump }}" == "Minor" ]]; then
            NEW_MINOR=$((MINOR + 1))
            NEW_VERSION="$MAJOR.$NEW_MINOR.0"
          elif [[ "${{ steps.extract-info.outputs.version_bump }}" == "Major" ]]; then
            NEW_MAJOR=$((MAJOR + 1))
            NEW_VERSION="$NEW_MAJOR.0.0"
          else
            NEW_VERSION="Unknown"  # Default if none selected
          fi
          echo "NEW_VERSION: $NEW_VERSION"  # Add this line to print the NEW_VERSION
          echo "::set-output name=new_tag_version::$NEW_VERSION"

      - name: Setting up Git
        run: |
          git config --global user.email "leiser.mahu@gmail.com"
          git config --global user.name "Tisks"
  
      - name: Update package version
        id: update-version
        run: |
          NEW_VERSION="${{ steps.new-version.outputs.new_tag_version }}"
  
          # Update the version in package.json
          node -e "const fs = require('fs'); const packageJson = JSON.parse(fs.readFileSync('package.json')); packageJson.version = '${NEW_VERSION}'; fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));"

      - name: Commit and push changes
        run: |
          NEW_VERSION="${{ steps.new-version.outputs.new_tag_version }}"
          git add package.json
          git commit -m "Update package version to $NEW_VERSION"
          git push

      - name: Create Tag
        run: |
          TAG_VERSION="${{ steps.new-version.outputs.new_tag_version }}"
          git tag -a "v$TAG_VERSION" -m "Version $TAG_VERSION"
          git push origin "v$TAG_VERSION"

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE=$(curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "${{ github.api_url }}/repos/${{ github.repository }}/releases" \
            -d '{"tag_name":"v${{ steps.new-version.outputs.new_tag_version }}", "name":"v${{ steps.new-version.outputs.new_tag_version }}",
                "draft":false,
                "prerelease":false,
                "generate_release_notes":true}')

          echo "RELEASE: $RELEASE"

      - name: Install
        run: yarn install --frozen-lockfile

      - name: Build package
        run: yarn build

      - name: Publish to NPM
        uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.NPM_TOKEN }} # Make sure you have an NPM token set as a secret

