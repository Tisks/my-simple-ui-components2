name: Publish to NPM

on:
  pull_request:
    types:
      - closed

jobs:
  on_pull_request_merge:
    runs-on: ubuntu-latest
    steps:
      - name: Check if PR is merged
        id: pr-merged
        run: |
          if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
            echo "Pull request is merged."
            echo "::set-output name=pr_merged::true"
          else
            echo "Pull request is not merged."
            echo "::set-output name=pr_merged::false"
          fi

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup node
        if: steps.pr-merged.outputs.pr_merged == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Get Version from package.json
        if: steps.pr-merged.outputs.pr_merged == 'true'
        id: get-version
        run: |
          TAG_VERSION=$(./util.sh get_tag_version 'package.json')
          TAG_VERSION_STORYBOOK=$(./util.sh get_tag_version './storybook/package.json')
          echo "TAG_VERSION Body: $TAG_VERSION"
          echo "::set-output name=tag_version::$TAG_VERSION"
          echo "::set-output name=tag_version_storybook::$TAG_VERSION_STORYBOOK"

      - name: Extract Version Bump
        if: steps.pr-merged.outputs.pr_merged == 'true'
        id: extract-info
        run: |
          GITHUB_BOT_COMMENT=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments")

          VERSION_CHECKBOXES=$(echo "$GITHUB_BOT_COMMENT" | jq '.[] | select(.user.login == "github-actions[bot]") | .body')

          echo "VERSION_CHECKBOXES: $VERSION_CHECKBOXES"

          if [ -z "$VERSION_CHECKBOXES" ]; then
            echo "No valid comments found. Exiting workflow."
            exit 0
          fi
        
          PACKAGE_VERSION=$(echo "$VERSION_CHECKBOXES" | grep -oP '(?<=Please check the type of version bump:)[^\n]*')
          STORYBOOK_VERSION=$(echo "$VERSION_CHECKBOXES" | grep -oP '(?<=the other one that states '\''storybook'\'':)[^\n]*')

          echo "PACKAGE_VERSION: $PACKAGE_VERSION"
          echo "STORYBOOK_VERSION: $STORYBOOK_VERSION"

          PACKAGE_BUMP=$(./util.sh extract_version_bump "$PACKAGE_VERSION")
          STORYBOOK_BUMP=$(./util.sh extract_version_bump "$STORYBOOK_VERSION")

          echo "::set-output name=version_bump::$PACKAGE_BUMP"
          echo "::set-output name=storybook_bump::$STORYBOOK_BUMP"

      - name: Determine new version
        id: new-version
        if: steps.pr-merged.outputs.pr_merged == 'true'
        run: |
          echo "Version Bump: ${{ steps.extract-info.outputs.version_bump }}"
          echo "Actual version: ${{ steps.get-version.outputs.tag_version }}"

          echo "Version Bump storybook: ${{ steps.extract-info.outputs.storybook_bump }}"
          echo "Actual version storybook: ${{ steps.get-version.outputs.tag_version_storybook }}"

          CURRENT_VERSION="${{ steps.get-version.outputs.tag_version }}"
          NEW_VERSION=$(./util.sh determine_new_version "${{ steps.extract-info.outputs.version_bump }}" "$CURRENT_VERSION")

          CURRENT_VERSION_STORYBOOK="${{ steps.get-version.outputs.tag_version_storybook }}"
          NEW_VERSION_STORYBOOK=$(./util.sh determine_new_version "${{ steps.extract-info.outputs.storybook_bump }}" "$CURRENT_VERSION_STORYBOOK")

          echo "NEW_VERSION: $NEW_VERSION"
          echo "NEW_VERSION_STORYBOOK: $NEW_VERSION_STORYBOOK"

          echo "::set-output name=new_tag_version::$NEW_VERSION"
          echo "::set-output name=new_tag_version_storybook::$NEW_VERSION_STORYBOOK"

      - name: Setting up Git
        run: |
          git config --global user.email "leiser.mahu@gmail.com"
          git config --global user.name "Tisks"

      - name: Create Tag
        if: steps.pr-merged.outputs.pr_merged == 'true'
        run: |
          TAG_VERSION="${{ steps.new-version.outputs.new_tag_version }}"
          git tag -a "v$TAG_VERSION" -m "Version $TAG_VERSION"
          git push origin "v$TAG_VERSION"
  
      - name: Update package version
        id: update-version
        if: steps.pr-merged.outputs.pr_merged == 'true'
        run: |
          CURRENT_VERSION="${{ steps.get-version.outputs.tag_version }}"
          NEW_VERSION="${{ steps.new-version.outputs.new_tag_version }}"
          ./util.sh update_version 'package.json' "$NEW_VERSION"

          CURRENT_VERSION="${{ steps.get-version.outputs.tag_version_storybook }}"
          NEW_VERSION="${{ steps.new-version.outputs.new_tag_version_storybook }}"
          ./util.sh update_version './storybook/package.json' "$NEW_VERSION"

      - name: Commit and push changes
        if: steps.pr-merged.outputs.pr_merged == 'true'
        run: |
          NEW_VERSION="${{ steps.new-version.outputs.new_tag_version }}"
          git add package.json
          git commit -m "Update package version to $NEW_VERSION"
          git push

      - name: Create Release
        if: steps.pr-merged.outputs.pr_merged == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE=$(curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "${{ github.api_url }}/repos/${{ github.repository }}/releases" \
            -d '{"tag_name":"v${{ steps.new-version.outputs.new_tag_version }}", "name":"v${{ steps.new-version.outputs.new_tag_version }}",
                "draft":false,
                "prerelease":false,
                "generate_release_notes":true}')

          echo "RELEASE: $RELEASE"

      - name: Install
        run: yarn install --frozen-lockfile

      - name: Build package
        run: yarn build

      - name: Publish to NPM
        if: steps.pr-merged.outputs.pr_merged == 'true'
        uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.NPM_TOKEN }}
